# Author @patriciogv - 2015

sources:
    osm:
        type: TopoJSON
        url: //vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson
    terrain:
        type: GeoJSON
        url: //52.70.150.13/data/B/{z}-{x}-{y}.json
    elevation:
        type: Raster
        url: //52.70.150.13/data/B/{z}-{x}-{y}.png
    normal:
        type: Raster
        url: http://crossorigin.me/http://52.72.241.124/normalmap/{z}/{x}/{y}.png
textures:
    elevation:
        url:
    normal:
        url:
scene:
    background: 
        color: white
cameras:
    camera1:
        type: perspective
        vanishing_point: [0, -500]
lights:
    directional1:
        type: directional
        direction: [.1, .5, -1]
        diffuse: .7
        ambient: .5
layers:
    # water:
    #     data: { source: osm }
    #     draw:
    #         elevate_lns:
    #             order: 1
    #             color: gray
    #             width: 1px
    terrain:
        data: { source: terrain }
        draw:
            elevate_cls:
                order: 0
                color: white
    # roads:
    #     data: { source: osm, layer: roads }
    #     filter: { $zoom: {min: 7}, not: { highway: service, kind: [rail, ferry] } }
    #     draw:
    #         elevate_lns:
    #             order: 0
    #             color: [.7,.7,.7]
    #             width: [[6,0px], [7,.25px], [10, .5px], [15, .75px], [17, 5m]]
    #     highway:
    #         filter: { kind: highway }
    #         draw:
    #             elevate_lns:
    #                 order: 1
    #                 color: [.8,.8,.8]#[1.000,0.897,0.058]
    #                 width: [[1,0px], [6,.25px], [11, 2px], [14, 3px], [16, 4px], [17, 10m]]
    #         link:
    #             filter: { is_link: yes } # on- and off-ramps, etc
    #             draw:
    #                 elevate_lns:
    #                     color: [.7,.7,.7]#[1.000,0.933,0.710]
    #                     width: [[10,0px], [14, 3px], [16, 5px], [18, 10m]]
    #             tunnel-link:
    #                 filter: {is_tunnel: yes, $zoom: {min: 13} }
    #                 draw:
    #                     elevate_lns:
    #                         color: [.5,.5,.5]#[0.805,0.748,0.557]
    #         tunnel:
    #             filter: {is_tunnel: yes, $zoom: {min: 13} }
    #             draw:
    #                 elevate_lns:
    #                     order: -1
    #                     color: [.5,.5,.5]#[0.805,0.748,0.557]
    #     major_road:
    #         filter: { kind: major_road }
    #         draw:
    #             elevate_lns:
    #                 color: [[13, [.6,.6,.6]], [17, white]]
    #                 width: [[1,0px], [6,.5px], [11,1px], [14, 2px], [16, 2.5px], [19, 8m]]
    #                 primary:
    #                     filter: { highway: primary }
    #                     draw:
    #                         elevate_lns:
    #                             width: [[1,0px], [6,.5px], [11,1px], [11, 1.5px], [13, 2.5px], [16, 2.5px], [19, 8m]]
    #                 secondary:
    #                     filter: { highway: secondary }
    #                     draw:
    #                         elevate_lns:
    #                             width: [[1,0px], [6,.5px], [11,1px], [13, 1.5px], [14, 2.5px], [16, 2.5px], [19, 8m]]
    #                 tertiary:
    #                     filter: { highway: tertiary }
    #                     draw:
    #                         elevate_lns:
    #                             width: [[1,0px], [6,.5px], [11,1px], [13, .75px], [14, 2.5px], [16, 2.5px], [19, 8m]]
    #     path:
    #         filter: { kind: path }
    #         draw:
    #             elevate_lns:
    #                 color: [0.8, 0.8, 0.8]
    #                 width: [[14,.1px],[16,.5px], [17, 2m]]
    # buildings:
    #     data: { source: osm }
    #     draw:
    #         elevate_ply:
    #             order: 0
    #             color: white
    #             extrude: true
styles:
    ##################################################################   MODULES
    space-tile:
        shaders:
            blocks:
                global: |
                    // Variant to be add to both vertex and fragments shaders
                    varying vec3 v_pos;
                    //
                    // Get the coordinates in tile space
                    // ================================
                    vec2 getTileCoords() {
                        return v_pos.xy+vec2(0.,1.);
                    }

                position: |
                    // Normalize the attribute position of a vertex
                    v_pos = modelPosition().xyz;
    geometry-matrices:
        shaders:
            defines:
                PI: 3.14159265358979323846
            blocks:
                global: |
                    mat2 rotate2D (float angle) {
                        return mat2(cos(angle),-sin(angle),
                                    sin(angle),cos(angle));
                    }
                    mat3 rotateX3D (float phi) {
                        return mat3(
                            vec3(1.,0.,0.),
                            vec3(0.,cos(phi),-sin(phi)),
                            vec3(0.,sin(phi),cos(phi)));
                    }
                    mat3 rotateY3D (float theta) {
                        return mat3(
                            vec3(cos(theta),0.,-sin(theta)),
                            vec3(0.,1.,0.),
                            vec3(sin(theta),0.,cos(theta)));
                    }
                    mat3 rotateZ3D (float psi) {
                        return mat3(
                            vec3(cos(psi),-sin(psi),0.),
                            vec3(sin(psi),cos(psi),0.),
                            vec3(0.,0.,1.));
                    }
    geometry-terrain:
        animated: true
        mix: [space-tile, geometry-matrices]
        shaders:
            uniforms:
                u_elevation: elevation
                u_normal: normal
                u_offset: [0, 0]
            defines:
                    ZOFFSET: 0
            blocks:
                global: |
                    varying vec3 v_orig_pos;
                    varying vec3 v_final_pos;

                    float getHeight() {
                        vec2 st = getTileCoords();
                        vec3 color = texture2D(u_elevation, st).rgb;
                        if (color.rg != vec2(0.0)) {
                            return -32768.+color.g*65025.+color.b*255.;
                        } else {
                            return -1.0;
                        }
                    }

                    void extrudeTerrain(inout vec4 position) {
                        vec2 pos = position.xy;
                        float height = getHeight();
                        if (height != -1.0) {
                            position.z += height;
                        }
                    }
                position: |
                    position.z += ZOFFSET*u_meters_per_pixel;
                    v_orig_pos = position.xyz;
                    extrudeTerrain(position);
                    v_final_pos = position.xyz;
                    position.xyz = rotateX3D(abs(cos(u_offset.x))*1.3) * rotateZ3D(cos(u_offset.y)*1.57075) * position.xyz;
                normal: |
                    float height = v_final_pos.z;
                    float n_height = height/500.;
    ##################################################################   ELEVATION STYLES 
    elevate_base:
        mix: [geometry-terrain]
        shaders:
            defines:
                    ZOFFSET: 0
    elevate_ply:
        base: polygons
        mix: [elevate_base]
        shaders:
            defines:
                    ZOFFSET: 0
            blocks:
                color: |
                    //color.rgb *= vec3(min((worldPosition().z*.001 + .5),1.));
    elevate_lns:
        base: lines
        mix: [elevate_base]
        shaders:
            defines:
                    ZOFFSET: .1
    elevate_cls:
        base: polygons
        mix: [elevate_base]
        shaders:
            extensions: OES_standard_derivatives
            defines:
                ZOFFSET: -1
            blocks:
                normal: |
                    normal.rgb = texture2D(u_normal,getTileCoords()).rgb;
                    #ifdef TANGRAM_EXTENSION_OES_standard_derivatives
                    if (normal.rgb == vec3(0.0)) {
                        normal.rgb = normalize( vec3(dFdx(height), dFdy(height), 1.) );
                    }
                    #endif
                color: |
                    //color.rgb = vec3(n_height);
