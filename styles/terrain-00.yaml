# Author @patriciogv - 2015

sources:
    osm:
        type: TopoJSON
        url: //vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson
    terrain:
        type: GeoJSON
        url: //52.70.150.13/data/B/{z}-{x}-{y}.json
    elevation:
        type: Raster
        url: //52.70.150.13/data/B/{z}-{x}-{y}.png
textures:
    elevation:
        url:
scene:
    background: 
        color: black
cameras:
    camera1:
        type: perspective
        vanishing_point: [0, -500]
lights:
    directional1:
        type: directional
        direction: [.1, .5, -1]
        diffuse: .7
        ambient: .5
layers:
    water:
        data: { source: osm }
        filter: { kind: [riverbank, dock, water, basin, reservoir, lake, canal, dam, ditch, drain, river, stream]}
        draw:
            elevate_lns:
                order: 1
                color: [0.580, 0.733, 0.765]
                width: 1px
    earth:
        data: { source: osm }
        draw:
            elevate_lns:
                order: 1
                color: [0.757, 0.961, 1.000]
                width: 2px
    terrain:
        data: { source: terrain }
        draw:
            elevate_cls:
                order: 0
                color: white
            # elevate_lns:
            #     order: 0
            #     color: gray
            #     width: 1px
styles:
    ##################################################################   MODULES
    space-tile:
        shaders:
            blocks:
                global: |
                    // Variant to be add to both vertex and fragments shaders
                    varying vec3 v_pos;
                    //
                    // Get the coordinates in tile space
                    // ================================
                    vec2 getTileCoords() {
                        return vec2(v_pos.x, 1.+v_pos.y);
                    }

                position: |
                    // Normalize the attribute position of a vertex
                    v_pos = modelPosition().xyz;
    geometry-matrices:
        shaders:
            defines:
                PI: 3.14159265358979323846
            blocks:
                global: |
                    mat2 rotate2D (float angle) {
                        return mat2(cos(angle),-sin(angle),
                                    sin(angle),cos(angle));
                    }
                    mat3 rotateX3D (float phi) {
                        return mat3(
                            vec3(1.,0.,0.),
                            vec3(0.,cos(phi),-sin(phi)),
                            vec3(0.,sin(phi),cos(phi)));
                    }
                    mat3 rotateY3D (float theta) {
                        return mat3(
                            vec3(cos(theta),0.,-sin(theta)),
                            vec3(0.,1.,0.),
                            vec3(sin(theta),0.,cos(theta)));
                    }
                    mat3 rotateZ3D (float psi) {
                        return mat3(
                            vec3(cos(psi),-sin(psi),0.),
                            vec3(sin(psi),cos(psi),0.),
                            vec3(0.,0.,1.));
                    }
    geometry-terrain:
        animated: true
        mix: [space-tile]
        shaders:
            uniforms:
                u_elevation: elevation
                u_offset: [0, 0]
            defines:
                ZOFFSET: 0
            blocks:
                global: |
                    varying vec3 v_orig_pos;
                    varying vec3 v_final_pos;

                    float getHeight() {
                        vec2 st = getTileCoords();
                        vec3 color = texture2D(u_elevation, st).rgb;
                        if (color.rg != vec2(0.0)) {
                            return -32768.+color.g*65025.+color.b*255.;
                        } else {
                            return -1.0;
                        }
                    }

                    void extrudeTerrain(inout vec4 position) {
                        vec2 pos = position.xy;
                        float height = getHeight();
                        if (height != -1.0) {
                            position.z += height;
                        }
                    }
                position: |
                    position.z += ZOFFSET*u_meters_per_pixel;
                    v_orig_pos = position.xyz;
                    extrudeTerrain(position);
                    v_final_pos = position.xyz;
                normal: |
                    float height = v_final_pos.z;
    tilt:
        animated: true
        mix: [geometry-matrices]
        shaders:
            uniforms:
                u_offset: [0, 0]
            blocks:
                position: |
                    position.xyz = rotateX3D(abs(cos(u_offset.x))) * rotateZ3D(cos(u_offset.y)) * position.xyz;
    ##################################################################  ELEVATION STYLES 
    elevate_base:
        shaders:

        mix: [geometry-terrain, tilt]
    elevate_ply:
        base: polygons
        mix: [elevate_base]
        shaders:
            blocks:
                filter: |
                    color.rgb *= vec3(min((height*.001 + .5),1.))*1.3;
    elevate_lns:
        base: lines
        mix: [geometry-terrain, tilt]
        lighting: false
        shaders:
            defines:
                ZOFFSET: 1.
    elevate_cls:
        base: polygons
        mix: [elevate_base]
        shaders:
            extensions: OES_standard_derivatives
            blocks:
                normal: |
                    #ifdef TANGRAM_EXTENSION_OES_standard_derivatives
                    normal.rgb = normalize( vec3(dFdx(height), dFdy(height), 1.) );
                    #endif
                color: |
                    height = getHeight();
                filter: |
                    color.rgb *= vec3(min((height*.001 + .5),1.));