# Author @patriciogv - 2015

sources:
    osm:
        type: TopoJSON
        url: //vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson
    terrain:
        type: GeoJSON
        url: //52.70.150.13/data/B/{z}-{x}-{y}.json
    elevation:
        type: Raster
        url: //52.70.150.13/data/B/{z}-{x}-{y}.png
textures:
    elevation:
        url:
    sem:
        url: ../imgs/sem-metal-0012.jpg
    sem_spec:
        url: ../imgs/sem-sky-0001.jpg
scene:
    background: 
        color: black
lights:
    point_1:
        type: point
        position: [0.,0.,1000px]
        origin: ground
        ambient: 0
        diffuse: .7
        specular: .5
cameras:
    camera1:
        type: perspective
        vanishing_point: [0, -500]
layers:
    water:
        data: { source: osm }
        filter: { kind: [riverbank, dock, water, basin, reservoir, lake, canal, dam, ditch, drain, river, stream]}
        draw:
            elevate_lns:
                order: 0
                color: white
                width: 1px
    ocean:
        data: { source: osm, layer: water }
        draw:
            fix_water:
                order: 1
                color: [0.1,0.1,0.1]
    earth:
        data: { source: osm }
        draw:
            elevate_lns:
                order: 1
                color: white
                width: 2px
    terrain:
        data: { source: terrain }
        draw:
            elevate_cls:
                order: 0
                color: white
            # elevate_lns:
            #     order: 0
            #     color: red
            #     width: 1px
styles:
    ##################################################################   MODULES
    space-tile:
        shaders:
            blocks:
                global: |
                    // Variant to be add to both vertex and fragments shaders
                    varying vec3 v_pos;
                    //
                    // Get the coordinates in tile space
                    // ================================
                    vec2 getTileCoords() {
                        return vec2(v_pos.x, 1.+v_pos.y);
                    }

                position: |
                    // Normalize the attribute position of a vertex
                    v_pos = modelPosition().xyz;
    geometry-matrices:
        shaders:
            defines:
                PI: 3.14159265358979323846
            blocks:
                global: |
                    mat2 rotate2D (float angle) {
                        return mat2(cos(angle),-sin(angle),
                                    sin(angle),cos(angle));
                    }
                    mat3 rotateX3D (float phi) {
                        return mat3(
                            vec3(1.,0.,0.),
                            vec3(0.,cos(phi),-sin(phi)),
                            vec3(0.,sin(phi),cos(phi)));
                    }
                    mat3 rotateY3D (float theta) {
                        return mat3(
                            vec3(cos(theta),0.,-sin(theta)),
                            vec3(0.,1.,0.),
                            vec3(sin(theta),0.,cos(theta)));
                    }
                    mat3 rotateZ3D (float psi) {
                        return mat3(
                            vec3(cos(psi),-sin(psi),0.),
                            vec3(sin(psi),cos(psi),0.),
                            vec3(0.,0.,1.));
                    }
    geometry-terrain:
        animated: true
        mix: [space-tile]
        shaders:
            uniforms:
                u_elevation: elevation
                u_offset: [0, 0]
            defines:
                ZOFFSET: 0
            blocks:
                global: |
                    varying vec3 v_orig_pos;
                    varying vec3 v_final_pos;

                    float getHeight() {
                        vec2 st = getTileCoords();
                        vec3 color = texture2D(u_elevation, st).rgb;
                        if (color.rg != vec2(0.0)) {
                            return -32768.+color.g*65025.+color.b*255.;
                        } else {
                            return -1.0;
                        }
                    }

                    void extrudeTerrain(inout vec4 position) {
                        vec2 pos = position.xy;
                        float height = getHeight();
                        if (height != -1.0) {
                            position.z += height;
                        }
                    }
                position: |
                    position.z += ZOFFSET*u_meters_per_pixel;
                    v_orig_pos = position.xyz;
                    extrudeTerrain(position);
                    v_final_pos = position.xyz;
                normal: |
                    float height = v_final_pos.z;
                    float n_height = height/500.;
    tilt:
        animated: true
        mix: [geometry-matrices]
        shaders:
            uniforms:
                u_offset: [0, 0]
            blocks:
                position: |
                    position.xyz = rotateX3D(abs(cos(u_offset.x))) * rotateZ3D(cos(u_offset.y)) * position.xyz;
    rim_light:
        shaders:
            blocks:
                global: |
                    vec3 rim (vec3 normal, float pct) {
                        float cosTheta = abs( dot( vec3(0.0,0.0,-1.0) , normal));
                        return vec3( pct * ( 1. - smoothstep( 0.0, 1., cosTheta ) ) );
                    }
                filter: |
                    normal.rgb = normal.rgb*2.-1.;
                    normal.rgb = rotateX3D(abs(cos(u_offset.x))) * rotateZ3D(cos(u_offset.y)) * normal.rgb;
                    normal.rgb = normal.rgb*.5+.5;
                    color.rgb += rim(normal, .3);
    grids-grid:
        shaders:
            blocks:
                global: |
                    // Draw a grid in the space a specific resolution and pressition
                    bool grid(vec2 st, float res, float press){
                        vec2 grid = fract(st*res);
                        return grid.x < res*press || grid.y < res*press;
                    }
                    //
                    // Draw a grid in the space a specific resolution
                    bool grid(vec2 st, float res){
                        return grid(st, res, 1.0);
                    }
    grids-tile:
        mix: [grids-grid]
        shaders:
            blocks:
                global: |
                    // Draw a grid using tile coordenates in a specific resolution
                    float tileGrid(float res){
                        vec2 st = getTileCoords()*100.*res;
                        float pct = 0.0;
                        float press = 0.4+(1.0-fract(u_map_position.z))*0.1;
                        if (grid(st,0.01,press)) pct += 0.5;
                        if (grid(st,0.1,press)) pct += 0.1;
                        return pct;
                    }
                    // Draw two grid that smoothly interpolates acording to zooms
                    float tileGrid(){ 
                        return mix(tileGrid(1.),tileGrid(2.),fract(u_map_position.z)); 
                    }
    ##################################################################  ELEVATION STYLES 
    elevate_base:
        mix: [geometry-terrain, tilt]
    elevate_ply:
        base: polygons
        mix: [elevate_base]
    elevate_lns:
        base: lines
        mix: [geometry-terrain, tilt]
        lighting: false
        shaders:
            defines:
                ZOFFSET: 1.
    elevate_cls:
        base: polygons
        mix: [elevate_base, rim_light]
        material:
            diffuse:
                texture: sem
                mapping: spheremap
            specular:
                texture: sem_spec
                mapping: spheremap
            shininess: 2.
        shaders:
            extensions: OES_standard_derivatives
            uniforms:
                u_color: [1.0,1.0,1.0]
            blocks:
                normal: |
                    #ifdef TANGRAM_EXTENSION_OES_standard_derivatives
                    normal.rgb = normalize( vec3(dFdx(height), dFdy(height), 1.) );
                    //normal.rgb = normal.rgb*2.-1.;
                    //normal.rgb = rotateX3D(abs(cos(u_offset.x))) * rotateZ3D(cos(u_offset.y)) * normal.rgb;
                    //normal.rgb = normal.rgb*.5+.5;
                    #endif
                color: |
                    color.rgb *= u_color;
    fix_water:
        base: polygons
        mix: [elevate_base, grids-tile]
        shaders:
            blocks:
                color: |
                    color.rgb += vec3(.2)*tileGrid();
