# Author @patriciogv - 2015

sources:
    osm:
        type: TopoJSON
        url: //vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson
    terrain:
        type: GeoJSON
        url: //52.70.150.13/data/B/{z}-{x}-{y}.json
    elevation:
        type: Raster
        url: //52.70.150.13/data/B/{z}-{x}-{y}.png
    water:
        type: GeoJSON
        url: ../data/water.json
textures:
    elevation:
        url:
scene:
    background: 
        color: white
cameras:
    camera1:
        type: perspective
        vanishing_point: [0, -500]
lights:
    directional1:
        type: directional
        direction: [.1, .5, -1]
        diffuse: .7
        ambient: .5
layers:
    water:
        data: { source: osm }
        # filter: { $zoom: { max: 15 } }
        draw:
            fix_water:
                order: 0
                color: [.2,.2,.2]
    sealevel:
        data: { source: water }
        filter: { kind: water, $zoom: { min: 15 } }
        draw:
            water:
                order: 0
                color: [.2,.2,.2]
    terrain:
        data: { source: terrain }
        draw:
            elevate_cls:
                order: 0
                color: white
    roads:
        data: { source: osm, layer: roads }
        filter: { $zoom: {min: 7}, not: { highway: service, kind: [rail, ferry] } }
        draw:
            elevate_lns:
                order: 0
                color: [.7,.7,.7]
                width: [[6,0px], [7,.25px], [10, .5px], [15, .75px], [17, 5m]]
        bridge:
            filter: { is_bridge: yes  }
            draw:
                elevate_lns:
                    order: 1
        highway:
            filter: { kind: highway }
            draw:
                elevate_lns:
                    order: 1
                    color: [.8,.8,.8]#[1.000,0.897,0.058]
                    width: [[1,0px], [6,.25px], [11, 2px], [14, 3px], [16, 4px], [17, 10m]]
            link:
                filter: { is_link: yes } # on- and off-ramps, etc
                draw:
                    elevate_lns:
                        color: [.7,.7,.7]#[1.000,0.933,0.710]
                        width: [[10,0px], [14, 3px], [16, 5px], [18, 10m]]
                tunnel-link:
                    filter: {is_tunnel: yes, $zoom: {min: 13} }
                    draw:
                        elevate_lns:
                            color: [.5,.5,.5]#[0.805,0.748,0.557]
            tunnel:
                filter: {is_tunnel: yes, $zoom: {min: 13} }
                draw:
                    elevate_lns:
                        order: -1
                        color: [.5,.5,.5]#[0.805,0.748,0.557]
        major_road:
            filter: { kind: major_road }
            draw:
                elevate_lns:
                    color: [[13, [.6,.6,.6]], [17, white]]
                    width: [[1,0px], [6,.5px], [11,1px], [14, 2px], [16, 2.5px], [19, 8m]]
                    primary:
                        filter: { highway: primary }
                        draw:
                            elevate_lns:
                                width: [[1,0px], [6,.5px], [11,1px], [11, 1.5px], [13, 2.5px], [16, 2.5px], [19, 8m]]
                    secondary:
                        filter: { highway: secondary }
                        draw:
                            elevate_lns:
                                width: [[1,0px], [6,.5px], [11,1px], [13, 1.5px], [14, 2.5px], [16, 2.5px], [19, 8m]]
                    tertiary:
                        filter: { highway: tertiary }
                        draw:
                            elevate_lns:
                                width: [[1,0px], [6,.5px], [11,1px], [13, .75px], [14, 2.5px], [16, 2.5px], [19, 8m]]
        path:
            filter: { kind: path }
            draw:
                elevate_lns:
                    color: [0.8, 0.8, 0.8]
                    width: [[14,.1px],[16,.5px], [17, 2m]]
    buildings:
        data: { source: osm }
        draw:
            elevate_ply:
                order: 0
                color: white
                extrude: true
styles:
    ##################################################################   MODULES
    space-tile:
        shaders:
            blocks:
                global: |
                    // Variant to be add to both vertex and fragments shaders
                    varying vec3 v_pos;
                    //
                    // Get the coordinates in tile space
                    // ================================
                    vec2 getTileCoords() {
                        return vec2(v_pos.x, 1.+v_pos.y);
                    }

                position: |
                    // Normalize the attribute position of a vertex
                    v_pos = modelPosition().xyz;
    geometry-matrices:
        shaders:
            defines:
                PI: 3.14159265358979323846
            blocks:
                global: |
                    mat2 rotate2D (float angle) {
                        return mat2(cos(angle),-sin(angle),
                                    sin(angle),cos(angle));
                    }
                    mat3 rotateX3D (float phi) {
                        return mat3(
                            vec3(1.,0.,0.),
                            vec3(0.,cos(phi),-sin(phi)),
                            vec3(0.,sin(phi),cos(phi)));
                    }
                    mat3 rotateY3D (float theta) {
                        return mat3(
                            vec3(cos(theta),0.,-sin(theta)),
                            vec3(0.,1.,0.),
                            vec3(sin(theta),0.,cos(theta)));
                    }
                    mat3 rotateZ3D (float psi) {
                        return mat3(
                            vec3(cos(psi),-sin(psi),0.),
                            vec3(sin(psi),cos(psi),0.),
                            vec3(0.,0.,1.));
                    }
    geometry-terrain:
        animated: true
        mix: [space-tile]
        shaders:
            uniforms:
                u_elevation: elevation
                u_offset: [0, 0]
                u_water_height: 0.
            defines:
                ZOFFSET: 0
            blocks:
                global: |
                    varying vec3 v_orig_pos;
                    varying vec3 v_final_pos;

                    float getHeight() {
                        vec2 st = getTileCoords();
                        vec3 color = texture2D(u_elevation, st).rgb;
                        if (color.rg != vec2(0.0)) {
                            return -32768.+color.g*65025.+color.b*255.;
                        } else {
                            return -1.0;
                        }
                    }

                    void extrudeTerrain(inout vec4 position) {
                        vec2 pos = position.xy;
                        float height = getHeight();
                        if (height != -1.0) {
                            position.z += height;
                        }
                    }
                position: |
                    position.z += ZOFFSET*u_meters_per_pixel;
                    v_orig_pos = position.xyz;
                    extrudeTerrain(position);
                    v_final_pos = position.xyz;
                normal: |
                    float height = v_final_pos.z;
    tilt:
        animated: true
        mix: [geometry-matrices]
        shaders:
            uniforms:
                u_offset: [0, 0]
            blocks:
                position: |
                    position.xyz = rotateX3D(abs(cos(u_offset.x))) * rotateZ3D(cos(u_offset.y)) * position.xyz;
    grids-grid:
        shaders:
            blocks:
                global: |
                    // Draw a grid in the space a specific resolution and pressition
                    bool grid(vec2 st, float res, float press){
                        vec2 grid = fract(st*res);
                        return grid.x < res*press || grid.y < res*press;
                    }
                    //
                    // Draw a grid in the space a specific resolution
                    bool grid(vec2 st, float res){
                        return grid(st, res, 1.0);
                    }
    grids-tile:
        mix: [grids-grid]
        shaders:
            blocks:
                global: |
                    // Draw a grid using tile coordenates in a specific resolution
                    float tileGrid(float res){
                        vec2 st = getTileCoords()*100.*res;
                        float pct = 0.0;
                        float press = 0.4+(1.0-fract(u_map_position.z))*0.1;
                        if (grid(st,0.01,press)) pct += 0.5;
                        if (grid(st,0.1,press)) pct += 0.1;
                        return pct;
                    }
                    // Draw two grid that smoothly interpolates acording to zooms
                    float tileGrid(){ 
                        return mix(tileGrid(1.),tileGrid(2.),fract(u_map_position.z)); 
                    }
    ##################################################################  FIX WATER
    fix_water:
        base: polygons
        mix: [tilt, space-tile, grids-tile]
        shaders:
            defines:
                ZOFFSET: 10.
            blocks:
                position: |
                    position.z += ZOFFSET*u_meters_per_pixel;
                color: |
                    color.rgb += vec3(.2)*tileGrid();
    water:
        base: polygons
        animated: true
        mix: [tilt, space-tile, grids-tile]
        shaders:
            uniforms:
                u_water_height: 0.
            blocks:
                position: |
                    position.z += u_water_height;
                color: |
                    color.rgb += vec3(.2)*tileGrid();
    ##################################################################  ELEVATION STYLES 
    elevate_base:
        mix: [geometry-terrain, tilt]
    elevate_ply:
        base: polygons
        mix: [elevate_base]
        shaders:
            blocks:
                color: |
                    if (height < u_water_height) {
                        color.rgb *= .5;
                    }
                filter: |
                    color.rgb *= vec3(min((height*.001 + .5),1.))*1.3;
    elevate_lns:
        base: lines
        mix: [geometry-terrain, tilt]
        shaders:
            defines:
                ZOFFSET: .1
            blocks:
                color: |
                    height = getHeight();
                    if (height < u_water_height) {
                        color.rgb *= .5;
                    }
                filter: |
                    color.rgb *= 1.5;
    elevate_cls:
        base: polygons
        mix: [elevate_base, grids-tile]
        shaders:
            extensions: OES_standard_derivatives
            defines:
                ZOFFSET: 0
            blocks:
                normal: |
                    #ifdef TANGRAM_EXTENSION_OES_standard_derivatives
                    normal.rgb = normalize( vec3(dFdx(height), dFdy(height), 1.) );
                    #endif
                color: |
                    height = getHeight();
                    if (height < u_water_height) {
                        color.rgb *= .5;
                        color.rgb += vec3(.2)*tileGrid();
                    }
                filter: |
                    color.rgb *= vec3(min((height*.001 + .5),1.));