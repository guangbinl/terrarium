# @patriciogv - 2016

import:
    - http://tangrams.github.io/blocks/geometry/tilt.yaml
    - http://tangrams.github.io/blocks/functions/map.yaml
    - http://tangrams.github.io/blocks/geometry/matrices.yaml
    - http://tangrams.github.io/blocks/space/tile.yaml
    - http://tangrams.github.io/blocks/grids/grid.yaml
    - http://tangrams.github.io/blocks/color/tools.yaml

sources:
    osm: 
        type: TopoJSON
        url: //vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-JUsa0Gc
        # rasters: [normals, terrarium-raster]
        rasters: [elevation, terrarium-raster]
    # normals:
    #     type: Raster
    #     url: https://terrain-preview.mapzen.com/normal/{z}/{x}/{y}.png
    #     max_zoom: 15
    terrarium-geom:
        type: GeoJSON
        url: http://52.70.150.13/data/B/{z}-{x}-{y}.json
        max_zoom: 18
        # rasters: [normals, terrarium-raster]
        rasters: [elevation, terrarium-raster]
    terrarium-raster:
        type: Raster
        url: http://52.70.150.13/data/B/{z}-{x}-{y}.png
        max_zoom: 18
    elevation:
        type: Raster
        url: http://c.tile.stamen.com/terrain-background/{z}/{x}/{y}.jpg
cameras:
    default:
        type: perspective
scene:
    background: 
        color: black
lights:
    light:
        type: directional
        direction: [0.644,-0.552,-0.531]
        diffuse: .7
        ambient: .5
layers:
    terrain:
        data: { source: terrarium-geom }
        draw:
            terrarium_trn:
                order: 0
                color: white
    water:
        data: { source: osm }
        filter: { kind: [riverbank, dock, water, basin, reservoir, lake, canal, dam, ditch, drain, river, stream]}
        draw:
            terrarium_lns:
                order: 1
                color: white
                width: 1px
    ocean:
        data: { source: osm, layer: water }
        draw:
            fix_water:
                order: 2
                color: [0.1,0.1,0.1]
    earth:
        data: { source: osm }
        draw:
            terrarium_lns:
                order: 3
                color: white
                width: 2px
    landuse:
        data: { source: osm }
        draw:
            terrarium_area:
                order: function() { return feature.sort_key; }
                color: [0.676, 0.802, 0.810]
                order: 4
    roads:
        data: { source: osm}
        filter: { not: { kind: [rail, ferry] } }
        draw:
            terrarium_lns:
                order: 4
                color: gray
                width: [[7,0.0px], [10, .5px], [15, .75px], [17, 5m]]
    buildings:
        data: { source: osm }
        draw:
            terrarium_ply:
                order: 5
                color: white
                extrude: true
styles:
    tilt:
        animated: true
        mix: [geometry-matrices]
        shaders:
            defines:
                PI: 3.1415926535897932384626433832795
                HALF_PI: 1.5707963267948966192313216916398
            blocks:
                position: |
                    float t = u_time*0.1; 
                    float z = clamp(smoothstep(0.7,1.,max((u_map_position.z)/18.,0.)*.9),0.,1.);
                    position.xyz = rotateX3D(z*HALF_PI) * rotateZ3D(sin(t)*PI*z) * position.xyz;         
    ##################################################################  REGULAR STYLES
    fix_water:
        base: polygons
        mix: [tilt, space-tile, grids-grid]
        shaders:
            blocks:
                global: |
                    // Draw a grid using tile coordenates in a specific resolution
                    float tileGrid(float res){
                        vec2 st = getTileCoords()*100.*res;
                        float pct = 0.0;
                        float press = 0.4+(1.0-fract(u_map_position.z))*0.1;
                        if (grid(st,0.01,press)) pct += 0.5;
                        if (grid(st,0.1,press)) pct += 0.1;
                        return pct;
                    }

                    // Draw two grid that smoothly interpolates acording to zooms
                    float tileGrid(){ 
                        return mix(tileGrid(1.),tileGrid(2.),fract(u_map_position.z)); 
                    }
                color: |
                    color.rgb += vec3(.2)*tileGrid();
    ##################################################################  TERRARIUM STYLES
    terrarium:
        raster: custom
        shaders:
            defines:
                ZOFFSET: 0.
            blocks:
                global: |
                    #ifdef TANGRAM_VERTEX_SHADER
                    uniform sampler2D u_rasters[TANGRAM_NUM_RASTER_SOURCES];
                    uniform vec2 u_raster_sizes[TANGRAM_NUM_RASTER_SOURCES];
                    uniform vec3 u_raster_offsets[TANGRAM_NUM_RASTER_SOURCES];
                    #define adjustRasterUV(raster_index, uv) ((uv) * u_raster_offsets[raster_index].z + u_raster_offsets[raster_index].xy)
                    #define currentRasterUV(raster_index) (adjustRasterUV(raster_index, v_modelpos_base_zoom.xy))
                    #define currentRasterPixel(raster_index) (currentRasterUV(raster_index) * rasterPixelSize(raster_index))
                    #define sampleRaster(raster_index) (texture2D(u_rasters[raster_index], currentRasterUV(raster_index)))
                    #define sampleRasterAtPixel(raster_index, pixel) (texture2D(u_rasters[raster_index], adjustRasterUV(raster_index, (pixel) / rasterPixelSize(raster_index))))
                    #define rasterPixelSize(raster_index) (u_raster_sizes[raster_index])
                    #endif
                    float getHeight() {
                        vec3 color = sampleRaster(1).rgb;
                        if (color.rg != vec2(0.0)) {
                            return -32768.+color.g*65025.+color.b*255.;
                        } else {
                            return -1.0;
                        }
                    }
                    void extrudeTerrain(inout vec4 position) {
                        vec2 pos = position.xy;
                        float height = getHeight();
                        if (height != -1.0) {
                            position.z += height;
                        }
                    }
                position: |
                    position.z += ZOFFSET*u_meters_per_pixel;
                    extrudeTerrain(position);
    terrarium_base:
        mix: [terrarium, tilt]
    terrarium_trn:
        base: polygons
        mix: [terrarium_base, color-tools, functions-map] 
        shaders:
            blocks:
                # normal: |
                #     normal = sampleRaster(0).rgb;
                color: |
                    float z = 1.-map(u_map_position.z,7.,14.,0.,1.);
                    float b = sampleRaster(0).b+clamp(z*z,0.,0.524);
                    if (b != 0.0) {
                        color.rgb = mix(vec3(0.000,0.000,0.000), vec3(0.389,0.408,0.430), smoothstep(0.564,1.,b));
                    }
    terrarium_ply:
        base: polygons
        mix: terrarium_base
    terrarium_area:
        base: polygons
        mix: [terrarium_ply, geometry-matrices, functions-map, space-tile]
        blend: inlay
        shaders: 
            blocks: 
                global: |
                    float stripes(vec2 st, float width){
                        st = rotate2D(0.78539816339)*st;
                        st *= 29.7;
                        return step(.5+width*0.5,abs(sin(st.y*3.14159265358)));
                    }
                filter: |
                    vec2 st = getTileCoords()*2.;
                    float pct = map(u_map_position.z,1.,15.,2.0,0., true);
                    color.a = stripes(st,1.-pct*pct)*.25;
    terrarium_building:
        base: polygons
        mix: [terrarium_ply]
        shaders:
            blocks:
                color: |
                    color.rgb *= vec3(min((worldPosition().z*.001 + .5),1.));
    terrarium_lns:
        base: lines
        mix: terrarium_base
        lighting: false
        shaders:
            defines:
                ZOFFSET: 1.