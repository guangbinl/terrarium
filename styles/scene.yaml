# @patriciogv - 2016

sources:
    osm: 
        type: TopoJSON
        url: //vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson?api_key=vector-tiles-JUsa0Gc
        rasters: [normals, terrarium-raster]
    normals:
        type: Raster
        url: https://terrain-preview.mapzen.com/normal/{z}/{x}/{y}.png
        max_zoom: 15
    terrarium-geom:
        type: GeoJSON
        url: //52.70.150.13/data/B/{z}-{x}-{y}.json
        max_zoom: 18
        rasters: [normals, terrarium-raster]
    terrarium-raster:
        type: Raster
        url: //52.70.150.13/data/B/{z}-{x}-{y}.png
        max_zoom: 18
cameras:
    default:
        type: perspective
scene:
    background: 
        color: black
lights:
    light:
        type: directional
        direction: [0.644,-0.552,-0.531]
        diffuse: .7
        ambient: .5
layers:
    terrain:
        data: { source: terrarium-geom }
        draw:
            terrarium_trn:
                order: 0
                color: white
    water:
        data: { source: osm }
        filter: { kind: [riverbank, dock, water, basin, reservoir, lake, canal, dam, ditch, drain, river, stream]}
        draw:
            terrarium_lns:
                order: 1
                color: white
                width: 1px
    ocean:
        data: { source: osm, layer: water }
        draw:
            fix_water:
                order: 2
                color: [0.1,0.1,0.1]
    earth:
        data: { source: osm }
        draw:
            terrarium_lns:
                order: 3
                color: white
                width: 2px
    roads:
        data: { source: osm}
        filter: { not: { kind: [rail, ferry] } }
        draw:
            terrarium_lns:
                order: 4
                color: gray
                width: [[7,0.0px], [10, .5px], [15, .75px], [17, 5m]]
    buildings:
        data: { source: osm }
        draw:
            terrarium_ply:
                order: 5
                color: white
                extrude: true
styles:
    ##################################################################    MODULES
    space-tile:
        shaders:
            blocks:
                global: |
                    // Variant to be add to both vertex and fragments shaders
                    varying vec3 v_pos;
                    //
                    // Get the coordinates in tile space
                    // ================================
                    vec2 getTileCoords() {
                        return v_pos.xy;
                    }
                position: |
                    // Normalize the attribute position of a vertex
                    v_pos = modelPosition().xyz;
    geometry-matrices:
        shaders:
            defines:
                PI: 3.14159265358979323846
            blocks:
                global: |
                    mat2 rotate2D (float angle) {
                        return mat2(cos(angle),-sin(angle),
                                    sin(angle),cos(angle));
                    }
                    mat3 rotateX3D (float phi) {
                        return mat3(
                            vec3(1.,0.,0.),
                            vec3(0.,cos(phi),-sin(phi)),
                            vec3(0.,sin(phi),cos(phi)));
                    }
                    mat3 rotateY3D (float theta) {
                        return mat3(
                            vec3(cos(theta),0.,-sin(theta)),
                            vec3(0.,1.,0.),
                            vec3(sin(theta),0.,cos(theta)));
                    }
                    mat3 rotateZ3D (float psi) {
                        return mat3(
                            vec3(cos(psi),-sin(psi),0.),
                            vec3(sin(psi),cos(psi),0.),
                            vec3(0.,0.,1.));
                    }
    tilt:
        animated: true
        mix: [geometry-matrices]
        shaders:
            defines:
                PI: 3.1415926535897932384626433832795
                HALF_PI: 1.5707963267948966192313216916398
            blocks:
                position: |
                    float t = u_time*0.1; 
                    float z = smoothstep(0.7,1.,max((u_map_position.z)/18.,0.)*.9);
                    position.xyz = rotateX3D(z*HALF_PI*1.5) * rotateZ3D(sin(t)*PI*z) * position.xyz;
    grids-grid:
        shaders:
            blocks:
                global: |
                    // Draw a grid in the space a specific resolution and pressition
                    bool grid(vec2 st, float res, float press){
                        vec2 grid = fract(st*res);
                        return grid.x < res*press || grid.y < res*press;
                    }
                    //
                    // Draw a grid in the space a specific resolution
                    bool grid(vec2 st, float res){
                        return grid(st, res, 1.0);
                    }
    grids-tile:
        mix: [space-tile, grids-grid]
        shaders:
            blocks:
                global: |
                    // Draw a grid using tile coordenates in a specific resolution
                    float tileGrid(float res){
                        vec2 st = getTileCoords()*100.*res;
                        float pct = 0.0;
                        float press = 0.4+(1.0-fract(u_map_position.z))*0.1;
                        if (grid(st,0.01,press)) pct += 0.5;
                        if (grid(st,0.1,press)) pct += 0.1;
                        return pct;
                    }
                    // Draw two grid that smoothly interpolates acording to zooms
                    float tileGrid(){ 
                        return mix(tileGrid(1.),tileGrid(2.),fract(u_map_position.z)); 
                    }
    ##################################################################  REGULAR STYLES
    fix_water:
        base: polygons
        mix: [tilt, grids-tile]
        shaders:
            blocks:
                color: |
                    color.rgb += vec3(.2)*tileGrid();
    ##################################################################  TERRARIUM STYLES
    terrarium:
        raster: custom
        shaders:
            defines:
                ZOFFSET: 0.
            blocks:
                global: |
                    #ifdef TANGRAM_VERTEX_SHADER
                    uniform sampler2D u_rasters[TANGRAM_NUM_RASTER_SOURCES];
                    uniform vec2 u_raster_sizes[TANGRAM_NUM_RASTER_SOURCES];
                    uniform vec3 u_raster_offsets[TANGRAM_NUM_RASTER_SOURCES];
                    #define adjustRasterUV(raster_index, uv) ((uv) * u_raster_offsets[raster_index].z + u_raster_offsets[raster_index].xy)
                    #define currentRasterUV(raster_index) (adjustRasterUV(raster_index, v_modelpos_base_zoom.xy))
                    #define currentRasterPixel(raster_index) (currentRasterUV(raster_index) * rasterPixelSize(raster_index))
                    #define sampleRaster(raster_index) (texture2D(u_rasters[raster_index], currentRasterUV(raster_index)))
                    #define sampleRasterAtPixel(raster_index, pixel) (texture2D(u_rasters[raster_index], adjustRasterUV(raster_index, (pixel) / rasterPixelSize(raster_index))))
                    #define rasterPixelSize(raster_index) (u_raster_sizes[raster_index])
                    #endif
                    float getHeight() {
                        vec3 color = sampleRaster(1).rgb;
                        if (color.rg != vec2(0.0)) {
                            return -32768.+color.g*65025.+color.b*255.;
                        } else {
                            return -1.0;
                        }
                    }
                    void extrudeTerrain(inout vec4 position) {
                        vec2 pos = position.xy;
                        float height = getHeight();
                        if (height != -1.0) {
                            position.z += height;
                        }
                    }
                position: |
                    position.z += ZOFFSET*u_meters_per_pixel;
                    extrudeTerrain(position);
    terrarium_base:
        mix: [terrarium, tilt]
    terrarium_trn:
        base: polygons
        mix: terrarium_base
        shaders:
            blocks:
                normal: |
                    normal = sampleRaster(0).rgb;
    terrarium_ply:
        base: polygons
        mix: terrarium_base
    terrarium_lns:
        base: lines
        mix: terrarium_base
        lighting: false
        shaders:
            defines:
                ZOFFSET: 1.