# Author @patriciogv - 2015

sources:
    osm:
        type: TopoJSON
        url: //vector.mapzen.com/osm/all/{z}/{x}/{y}.topojson
    terrain:
        type: GeoJSON
        url: //52.70.150.13/data/B/{z}-{x}-{y}.json
    elevation:
        type: Raster
        url: //52.70.150.13/data/B/{z}-{x}-{y}.png
    normal:
        type: Raster
        url: http://crossorigin.me/http://52.72.241.124/normalmap/{z}/{x}/{y}.png
textures:
    elevation:
        url:
    normal:
        url:
scene:
    background: 
        color: black
cameras:
    camera1:
        type: perspective
        vanishing_point: [0, -500]
lights:
    directional1:
        type: directional
        direction: [.1, .5, -1]
        diffuse: .3
        ambient: .0
layers:
    buildings:
        data: { source: osm }
        draw:
            elevate_ply:
                order: 0
                color: [1,1,1]
                extrude: true
    ocean:
        data: { source: osm, layer: water }
        draw:
            fix_water:
                order: 0
                color: [0.1,0.1,0.1]
    terrain:
        data: { source: terrain }
        draw:
            elevate_cls:
                order: 0
                color: white
styles:
    space-tile:
        shaders:
            blocks:
                global: |
                    // Variant to be add to both vertex and fragments shaders
                    varying vec3 v_pos;
                    //
                    // Get the coordinates in tile space
                    // ================================
                    vec2 getTileCoords() {
                        return v_pos.xy+vec2(0.,1.);
                    }

                position: |
                    // Normalize the attribute position of a vertex
                    v_pos = modelPosition().xyz;
    geometry-matrices:
        shaders:
            defines:
                PI: 3.14159265358979323846
            blocks:
                global: |
                    mat2 rotate2D (float angle) {
                        return mat2(cos(angle),-sin(angle),
                                    sin(angle),cos(angle));
                    }
                    mat3 rotateX3D (float phi) {
                        return mat3(
                            vec3(1.,0.,0.),
                            vec3(0.,cos(phi),-sin(phi)),
                            vec3(0.,sin(phi),cos(phi)));
                    }
                    mat3 rotateY3D (float theta) {
                        return mat3(
                            vec3(cos(theta),0.,-sin(theta)),
                            vec3(0.,1.,0.),
                            vec3(sin(theta),0.,cos(theta)));
                    }
                    mat3 rotateZ3D (float psi) {
                        return mat3(
                            vec3(cos(psi),-sin(psi),0.),
                            vec3(sin(psi),cos(psi),0.),
                            vec3(0.,0.,1.));
                    }
    geometry-terrain:
        animated: true
        mix: [space-tile]
        shaders:
            uniforms:
                u_elevation: elevation
                u_offset: [0, 0]
            defines:
                ZOFFSET: 0
            blocks:
                global: |
                    varying vec3 v_orig_pos;
                    varying vec3 v_final_pos;
                    float getHeight() {
                        vec2 st = getTileCoords();
                        vec3 color = texture2D(u_elevation, st).rgb;
                        if (color.rg != vec2(0.0)) {
                            return -32768.+color.g*65025.+color.b*255.;
                        } else {
                            return -1.0;
                        }
                    }

                    void extrudeTerrain(inout vec4 position) {
                        vec2 pos = position.xy;
                        float height = getHeight();
                        if (height != -1.0) {
                            position.z += height;
                        }
                    }
                position: |
                    position.z += ZOFFSET*u_meters_per_pixel;
                    v_orig_pos = position.xyz;
                    extrudeTerrain(position);
                    v_final_pos = position.xyz;
                normal: |
                    float height = v_final_pos.z;
                    float n_height = height/500.;
    tilt:
        animated: true
        mix: [geometry-matrices]
        shaders:
            uniforms:
                u_offset: [0, 0]
            blocks:
                position: |
                    position.xyz = rotateX3D(abs(cos(u_offset.x))) * rotateZ3D(cos(u_offset.y)) * position.xyz;
    grids-grid:
        shaders:
            blocks:
                global: |
                    // Draw a grid in the space a specific resolution and pressition
                    bool grid(vec2 st, float res, float press){
                        vec2 grid = fract(st*res);
                        return grid.x < res*press || grid.y < res*press;
                    }
                    //
                    // Draw a grid in the space a specific resolution
                    bool grid(vec2 st, float res){
                        return grid(st, res, 1.0);
                    }
    grids-tile:
        mix: [grids-grid]
        shaders:
            blocks:
                global: |
                    // Draw a grid using tile coordenates in a specific resolution
                    float tileGrid(float res){
                        vec2 st = getTileCoords()*100.*res;
                        float pct = 0.0;
                        float press = 0.4+(1.0-fract(u_map_position.z))*0.1;
                        if (grid(st,0.01,press)) pct += 0.5;
                        if (grid(st,0.1,press)) pct += 0.1;
                        return pct;
                    }
                    // Draw two grid that smoothly interpolates acording to zooms
                    float tileGrid(){ 
                        return mix(tileGrid(1.),tileGrid(2.),fract(u_map_position.z)); 
                    }
    rim_light:
        shaders:
            blocks:
                global: |
                    vec3 rim (vec3 normal, float pct) {
                        float cosTheta = abs( dot( vec3(0.0,0.0,-1.0) , normal));
                        return vec3( pct * ( 1. - smoothstep( 0.0, 1., cosTheta ) ) );
                    }
    dof:
        shaders:
            defines:
                SCALE: 10000.0
            uniforms:
                u_near_clip: 0
                u_far_clip: 0.2
                u_focus_distance: 0
                u_zoom: 0.3
            blocks:
                global: |
                    varying vec3 v_rotated_pos;
                position: |
                    v_rotated_pos = position.xyz;
                    position.z += u_zoom*10000.;
                normal: |
                    float near = u_near_clip*SCALE;
                    float far = u_far_clip*SCALE;
                    float dist = u_focus_distance*(far*0.01);
                    float dof = clamp(1.-abs((near-v_rotated_pos.z)/(far-near)-dist),0.,1.);

    ##################################################################  ELEVATION STYLES 
    elevate_base:
        mix: [geometry-terrain, tilt, dof, rim_light]
        blend: inlay
        shaders: 
            uniforms:
                u_rim: .7
            blocks:
                filter: |
                    //color.rgb *= dof;
                    color.rgb += mix(vec3(0.),rim(normal,u_rim),dof);
                    color.a = max(color.r,max(color.g,color.b));
                    
    elevate_ply:
        base: polygons
        mix: [elevate_base]
    elevate_lns:
        base: lines
        mix: [elevate_base]
        shaders:
            defines:
                ZOFFSET: 1.
    elevate_cls:
        base: polygons
        mix: [elevate_base]
        shaders:
            extensions: OES_standard_derivatives
            blocks:
                normal: |
                    //normal.rgb = texture2D(u_normal,getTileCoords()).rgb;
                    #ifdef TANGRAM_EXTENSION_OES_standard_derivatives
                    if (normal.rgb == vec3(0.0)) {
                        normal.rgb = normalize( vec3(dFdx(height), dFdy(height), 1.) );
                    }
                    #endif
    fix_water:
        base: polygons
        mix: [elevate_base, grids-tile]
        shaders:
            defines:
                ZOFFSET: 2.
            blocks:
                color: |
                    color.rgb += vec3(.2)*tileGrid();